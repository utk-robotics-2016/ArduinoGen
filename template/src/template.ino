// Auto-generated by ArduinoGen

// Includes
#include "Motor.h"
#include "NewPing.h"
#include "Encoder.h"

#include "PID.h"
#include "vPID.h"
#include "Stepper.h"
#include "Servo.h"
#include <Wire.h>
#include "I2CEncoder.h"
#include "VelocityControlledMotor.h";
#include "Arm.h";

#define STR1(x)  #x
#define STR(x)  STR1(x)

// Globals
int ledState = HIGH;
// Command parsing
const int MAX_ARGS = 6;
String args[MAX_ARGS];
int numArgs = 0;

// Pin definitions
const char LED = 13;
const char template_line_sensor1_pin = 13;
const char template_line_sensor0_pin = 4;

const char template_ultrasonic_pin = 8;

const char template_encoder0_pinA = 4;
const char template_encoder0_pinB = 8;
const char template_encoder1_pinA = 16;
const char template_encoder1_pinB = 6;

const char template_stepper_pinA = 16;
const char template_stepper_pinB = 14;
const char template_stepper_pinC = 6;
const char template_stepper_pinD = 9;

const char template_button0_pin = 10;
const char template_button1_pin = 15;
const char template_button2_pin = 15;
const char template_button3_pin = 14;
const char template_limit_switch0_pin = 9;
const char template_limit_switch1_pin = 5;
const char template_limit_switch2_pin = 10;
const char template_limit_switch3_pin = 14;
const char template_switch0_pin = 4;
const char template_switch1_pin = 2;
const char template_switch2_pin = 5;
const char template_switch3_pin = 14;

const char template_servo_pin = 5;


// Constructors
const char template_monster_moto_motor0_index = 0;
Motor motors[4] = {
const char template_monster_moto_motor1_index = 1;
Motor motors[4] = {
const char template_rover_five_motor0_index = 2;
Motor motors[4] = {
const char template_rover_five_motor1_index = 3;
Motor motors[4] = {
	Motor(9, 13, 5, 0, MonsterMoto),
	Motor(12, 16, 10, 1, MonsterMoto),
	Motor(10, -1, 8, 0, RoverFive),
	Motor(11, -1, 15, 1, RoverFive)
};

const char template_line_sensor1_index = 0;
char digital_linesensors[1] = {
	template_line_sensor1_pin
};
const char template_line_sensor0_index = 0;
char analog_linesensors[1] = {
	template_line_sensor0_pin
};

const char template_ultrasonic_index = 0;
NewPing ultrasonics[1] = {
	NewPing(template_ultrasonic_pin, template_ultrasonic_pin)
};

const char template_encoder0_index = 0;
Encoder encoders[2] = {
const char template_encoder1_index = 1;
Encoder encoders[2] = {
	Encoder(template_encoder0_pinA, template_encoder0_pinB),
	Encoder(template_encoder1_pinA, template_encoder1_pinB)
};

const char template_pid0_index = 0;
const char template_pid3_index = 1;
double lastPositions_vpid[2];
double Inputs_vpid[2], Setpoints_vpid[2], Outputs_vpid[2];
vPID vpids[2] = {
	vPID(&Inputs_vpid[template_pid0_index], &Outputs_vpid[template_pid0_index], &Setpoints_vpid[template_pid0_index], 4.100000, 0.200000, 2.100000, DIRECT),
	vPID(&Inputs_vpid[template_pid3_index], &Outputs_vpid[template_pid3_index], &Setpoints_vpid[template_pid3_index], 4.100000, 0.200000, 2.100000, DIRECT)
};
const char template_pid1_index = 0;
const char template_pid2_index = 1;
double lastPositions_pid[2];
double Inputs_pid[2], Setpoints_pid[2], Outputs_pid[2];
PID pids[2] = {
	PID(&Inputs_pid[template_pid1_index], &Outputs_pid[template_pid1_index], &Setpoints_pid[template_pid1_index], 4.100000, 0.200000, 2.100000, REVERSE),
	PID(&Inputs_pid[template_pid2_index], &Outputs_pid[template_pid2_index], &Setpoints_pid[template_pid2_index], 4.100000, 0.200000, 2.100000, REVERSE)
};

const char template_stepper_index = 0;
Stepper steppers[1] = {
	Stepper(3, template_stepper_pinA, template_stepper_pinB, template_stepper_pinC, template_stepper_pinD
};

const char template_button0_index = 0;
const char template_button1_index = 1;
const char template_button2_index = 2;
const char template_button3_index = 3;
const char template_limit_switch0_index = 4;
const char template_limit_switch1_index = 5;
const char template_limit_switch2_index = 6;
const char template_limit_switch3_index = 7;
const char template_switch0_index = 8;
const char template_switch1_index = 9;
const char template_switch2_index = 10;
const char template_switch3_index = 11;
char switches[12] = {
	template_button0_pin,
	template_button1_pin,
	template_button2_pin,
	template_button3_pin,
	template_limit_switch0_pin,
	template_limit_switch1_pin,
	template_limit_switch2_pin,
	template_limit_switch3_pin,
	template_switch0_pin,
	template_switch1_pin,
	template_switch2_pin,
	template_switch3_pin
};

const char template_servo_index = 0;
char servo_pins[1] = {
	template_servo_pin
};
Servo servos[1];

const char template_i2c_encoder1_index = 0;
I2CEncoder i2cencoders[2];
const char template_i2c_encoder0_index = 1;
I2CEncoder i2cencoders[2];

VelocityControlledMotor vcms[1] = \{
	VelocityControlledMotor(motors[template_rover_five_motor0_index], i2cencoders[template_i2c_encoder0_index], vpids[template_pid0_index], &Inputs_vpid[template_pid0_index], &Setpoints_vpid[template_pid0_index], &Outputs_vpid[template_pid0_index])
}};

Arm arms[1] = {
	Arm(template_servo_index, template_servo_index, template_servo_index, template_servo_index, template_servo_index, servo_pins, servos)
}};


void setup() {
    // Init LED pin
    pinMode(LED, OUTPUT);

	pinMode(9, OUTPUT);
	pinMode(13, OUTPUT);
	pinMode(5, OUTPUT);
	pinMode(12, OUTPUT);
	pinMode(16, OUTPUT);
	pinMode(10, OUTPUT);
	pinMode(10, OUTPUT);
	pinMode(11, OUTPUT);
	pinMode(template_encoder0_pinA, INPUT);
	pinMode(template_encoder0_pinB, INPUT);
	pinMode(template_encoder1_pinA, INPUT);
	pinMode(template_encoder1_pinB, INPUT);
	pinMode(template_stepper_pinA, OUTPUT);
	pinMode(template_stepper_pinB, OUTPUT);
	pinMode(template_stepper_pinC, OUTPUT);
	pinMode(template_stepper_pinD, OUTPUT);
	steppers[template_stepper_index].setSpeed(9.000000);

	pinMode(template_button0_pin, INPUT_PULLUP);
	pinMode(template_button1_pin, INPUT);
	pinMode(template_button2_pin, INPUT);
	pinMode(template_button3_pin, INPUT_PULLUP);
	pinMode(template_limit_switch0_pin, INPUT_PULLUP);
	pinMode(template_limit_switch1_pin, INPUT);
	pinMode(template_limit_switch2_pin, INPUT);
	pinMode(template_limit_switch3_pin, INPUT_PULLUP);
	pinMode(template_switch0_pin, INPUT_PULLUP);
	pinMode(template_switch1_pin, INPUT);
	pinMode(template_switch2_pin, INPUT);
	pinMode(template_switch3_pin, INPUT_PULLUP);

	servos[template_servo_index].attach(template_servo_pin);

    Wire.begin();
	i2cencoders[template_i2c_encoder1_index].init(MOTOR_393_TORQUE_ROTATIONS, MOTOR_393_TIME_DELTA);
	i2cencoders[template_i2c_encoder0_index].init(MOTOR_393_TORQUE_ROTATIONS, MOTOR_393_TIME_DELTA);
	i2cencoders[template_i2c_encoder1_index].setReversed(true);
	i2cencoders[template_i2c_encoder1_index].zero();
	i2cencoders[template_i2c_encoder0_index].zero();

    //Init Serial
    Serial.begin(115200);
}

