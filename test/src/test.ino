// Auto-generated by ArduinoGen

// Includes
#include "CmdMessenger.h"
#include "Encoder.h"
#include <LiquidCrystal.h>
#include "Servo.h"
#include "NewPing.h"
#include <Wire.h>
#include "Magnetometer.h"


// Globals
int ledState = HIGH;

// Pin definitions
const char LED = 13;

const char encoder_pin_a = 4;
const char encoder_pin_b = 5;
const char encoder2_pin_a = 7;
const char encoder2_pin_b = 8;

const char switch_pin = 1;
const char switch_pullup_pin = 2;

const char led_pin = 6;


const char servo_pin = 11;

const char a_out_pin = 12;

const char ultrasonic_trigger = 14;
const char ultrasonic_echo = 13;


// Constructors
// Attach a new CmdMessenger object to the default Serial port
CmdMessenger cmdMessenger = CmdMessenger(Serial);
Encoder encoders[2] =
{
    Encoder(encoder_pin_a, encoder_pin_b),
    Encoder(encoder2_pin_a, encoder2_pin_b)
};

char digital_inputs[2] =
{
    switch_pin,
    switch_pullup_pin
};

char digital_outputs[1] =
{
    led_pin
};

LiquidCrystal lcds[1] =
{
    LiquidCrystal(4, 5, 6, 6, 6, 6)
};


char analog_outputs[1] =
{
    a_out_pin
};

NewPing ultrasonics[1] =
{
    NewPing(ultrasonic_trigger, ultrasonic_echo)
};

// There can only be one
Magnetometer magnetometer;

// This is the list of recognized commands. These can be commands that can either be sent or received.
// In order to receive, attach a callback function to these events
enum
{
    kAcknowledge,
    kError,
    kUnknown,
    kSetLed,
    kPing,
    kPingResult,
    kPong,
    kReadEncoder,
    kReadEncoderResult,
    kZeroEncoder,
    kReadDigitalInput,
    kReadDigitalInputResult,
    kWriteDigitalOutput,
    kPrintLCD,
    kClearLCD,
    kSetCursorLCD,
    kSetServo,
    kDetachServo,
    kWriteAnalogOutput,
    kReadUltrasonic,
    kReadUltrasonicResult,
    kReadX,
    kReadXResult,
    kReadY,
    kReadYResult,
    kReadZ,
    kReadZResult
};

void setup()
{
    // Init LED pin
    pinMode(LED, OUTPUT);

    pinMode(encoder_pin_a, INPUT);
    pinMode(encoder_pin_b, INPUT);
    pinMode(encoder2_pin_a, INPUT);
    pinMode(encoder2_pin_b, INPUT);

    pinMode(switch_pin, INPUT);
    pinMode(switch_pullup_pin, INPUT_PULLUP);

    pinMode(led_pin, OUTPUT);

// LCD inits:
    lcds[0].begin(20, 2);


    pinMode(a_out_pin, OUTPUT);


    Wire.begin();
    magnetometer.config();

    // Initialize Serial Communication
    Serial.begin(115200);

    // Attach callback methods
    attachCommandCallbacks();

    // Flash led 3 times at the end of setup
    for(int i = 0; i < 3; i++)
    {
        digitalWrite(LED, HIGH);
        delay(250);
        digitalWrite(LED, LOW);
        delay(250);
    }
    ledState = LOW;
}

void loop()
{
    // Process incoming serial data, and perform callbacks
    cmdMessenger.feedinSerialData();







}

// Callbacks define on which received commands we take action
void attachCommandCallbacks()
{
    // Attach callback methods
    cmdMessenger.attach(unknownCommand);
    cmdMessenger.attach(kPing, ping);
    cmdMessenger.attach(kSetLed, setLed);
    cmdMessenger.attach(kReadEncoder, readEncoder);
    cmdMessenger.attach(kZeroEncoder, zeroEncoder);
    cmdMessenger.attach(kReadDigitalInput, readDigitalInput);
    cmdMessenger.attach(kWriteDigitalOutput, writeDigitalOutput);
    cmdMessenger.attach(kPrintLCD, printLCD);
    cmdMessenger.attach(kClearLCD, clearLCD);
    cmdMessenger.attach(kSetCursor, setCursorLCD);
    cmdMessenger.attach(kSetServo, setServo);
    cmdMessenger.attach(kDetachServo, detachServo);
    cmdMessenger.attach(kWriteAnalogOutput, writeAnalogOutput);
    cmdMessenger.attach(kReadUltrasonic, readUltrasonic);
    cmdMessenger.attach(kReadX, readX);
    cmdMessenger.attach(kReadY, readY);
    cmdMessenger.attach(kReadZ, readZ);
}

// Called when a received command has no attached function
void unknownCommand()
{
    cmdMessenger.sendCmd(kError, kUnknown);
}

// Called upon initialization of Spine to check connection
void ping()
{
    cmdMessenger.sendBinCmd(kAcknowledge, kPing);
    cmdMessenger.sendBinCmd(kPingResult, kPong);
}

// Callback function that sets led on or off
void setLed()
{
    // Read led state argument, interpret string as boolean
    ledState = cmdMessenger.readBoolArg();
    digitalWrite(LED, ledState);
    cmdMessenger.sendBinCmd(kAcknowledge, kSetLed);
}

// Command Functions
void readEncoder()
{
    int indexNum = cmdMessenger.readBinArg<int>();
    if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > 2)
    {
        cmdMessenger.sendBinCmd(kError, kReadEncoder);
        return;
    }
    cmdMessenger.sendBinCmd(kAcknowledge, kReadEncoder);
    cmdMessenger.sendBinCmd(kReadEncoderResult, encoders[indexNum].read());
}
void zeroEncoder()
{
    int indexNum = cmdMessenger.readBinArg<int>()
                   if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > 2)
    {
        cmdMessenger.sendBinCmd(kError, kZeroEncoder);
        return;
    }
    encoders[indexNum].write(0);
    cmdMessenger.sendBinCmd(kAcknowledge, kZeroEncoder);
}

void readDigitalInput()
{
    int indexNum = cmdMessenger.readBinArg<int>();
    if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > 2)
    {
        cmdMessenger.sendBinCmd(kError, kReadDigitalInput);
        return;
    }
    cmdMessenger.sendBinCmd(kAcknowledge, kReadDigitalInput);
    cmdMessenger.sendBinCmd(kReadDigitalInputResult, digitalRead(digital_inputs[indexNum]));
}

void writeDigitalOutput()
{
    int indexNum = cmdMessenger.readBinArg<int>();
    if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > 1)
    {
        cmdMessenger.sendBinCmd(kError, kWriteDigitalOutput);
        return;
    }
    bool value = cmdMessenger.readBinArg<bool>();
    digitalWrite(digital_outputs[indexNum], value);
    cmdMessenger.sendBinCmd(kAcknowledge, kWriteDigitalOutput);
}

void printLCD()
{
    int indexNum = cmdMessenger.readBinArg<int>();
    if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > 1)
    {
        cmdMessenger.sendBinCmd(kError, kPrintLCD);
        return;
    }
    String text = cmdMessenger.readStringArg();
    lcds[indexNum].print(text);
    cmdMessenger.sendBinCmd(kAcknowledge, kPrintLCD);
}
void clearLCD()
{
    int indexNum = cmdMessenger.readBinArg<int>();
    if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > 1)
    {
        cmdMessenger.sendBinCmd(kError, kPrintLCD);
        return;
    }
    lcds[indexNum].clear();
    cmdMessenger.sendBinCmd(kAcknowledge, kClearLCD);
}
void setCursorLCD()
{
    int indexNum = cmdMessenger.readBinArg<int>();
    if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > 1)
    {
        cmdMessenger.sendBinCmd(kError, kPrintLCD);
        return;
    }
    lcds[indexNum].setCursor(cmdMessenger.readBinArg<int>(), cmdMessenger.readBinArg<int>());
    cmdMessenger.sendBinCmd(kAcknowledge, kSetCursorLCD);
}

void setServo()
{
    int indexNum = cmdMessenger.readBinArg<int>();
    if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > 1)
    {
        cmdMessenger.sendBinCmd(kError, kSetServo);
        return;
    }
    int value = cmdMessenger.readBinArg<int>();
    if(!cmdMessenger.isArgOk())
    {
        cmdMessenger.sendBinCmd(kError, kSetServo);
        return;
    }
    if(!servos[indexNum].attached())
    {
        servos[indexNum].attach(servo_pins[indexNum]);
    }
    servos[indexNum].write(value);
    cmdMessenger.sendBinCmd(kAcknowledge, kSetServo);
}
void detachServo()
{
    int indexNum = cmdMessenger.readBinArg<int>();
    if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > 1)
    {
        cmdMessenger.sendBinCmd(kError, kDetachServo);
        return;
    }
    servos[indexNum].detach();
    cmdMessenger.sendBinCmd(kAcknowledge, kDetachServo);
}

void writeAnalogOutput()
{
    int indexNum = cmdMessenger.readBinArg<int>();
    if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > 1)
    {
        cmdMessenger.sendBinCmd(kError, kWriteAnalogOutput);
        return;
    }
    int value = cmdMessenger.readBinArg<int>();
    if(!cmdMessenger.isArgOk() ||value < 0 || value > 1023)
    {
        cmdMessenger.sendBinCmd(kError, kWriteAnalogOutput);
        return;
    }
    analogWrite(analog_outputs[indexNum], value);
    cmdMessenger.sendBinCmd(kAcknowledge, kWriteAnalogOutput);
}

void readUltrasonic()
{
    int indexNum = cmdMessenger.readBinArg<int>();
    if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > 1)
    {
        cmdMessenger.sendBinCmd(kError, kReadUltrasonic);
        return;
    }
    cmdMessenger.sendBinCmd(kAcknowledge, kReadUltrasonic);
    cmdMessenger.sendBinCmd(kReadUltrasonicResult, ultrasonics[indexNum].ping_cm());
}

void readX()
{
    cmdMessenger.sendBinCmd(kAcknowledge, kReadX);
    cmdMessenger.sendBinCmd(kReadXResult, magnetometer.readX());
}
void readY()
{
    cmdMessenger.sendBinCmd(kAcknowledge, kReadY);
    cmdMessenger.sendBinCmd(kReadYResult, magnetometer.readY());
}
void readZ()
{
    cmdMessenger.sendBinCmd(kAcknowledge, kReadZ);
    cmdMessenger.sendBinCmd(kReadZResult, magnetometer.readZ());
}

// Extra Functions





