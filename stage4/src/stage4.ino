// Auto-generated by ArduinoGen

// Includes
#include "CmdMessenger.h"
#include "Servo.h"


// Globals
int ledState = HIGH;

// Pin definitions
const char LED = 13;

const char stage1_extension_pin = 9;
const char stage2_extension_pin = 6;
const char stage3_extension_pin = 10;


// Constructors
// Attach a new CmdMessenger object to the default Serial port
CmdMessenger cmdMessenger = CmdMessenger(Serial);

// This is the list of recognized commands. These can be commands that can either be sent or received.
// In order to receive, attach a callback function to these events
enum {
	kAcknowledge,
	kError,
	kUnknown,
	kSetLed,
	kPing,
	kPingResult,
	kPong,
	kSetServo,
	kDetachServo
};
const char stage1_extension_index = 0;
const char stage2_extension_index = 1;
const char stage3_extension_index = 2;
char servo_pins[3] = {
	stage1_extension_pin,
	stage2_extension_pin,
	stage3_extension_pin
};
Servo servos[3];


void setup() {
	// Init LED pin
	pinMode(LED, OUTPUT);

	servos[stage1_extension_index].attach(stage1_extension_pin);
	servos[stage2_extension_index].attach(stage2_extension_pin);
	servos[stage3_extension_index].attach(stage3_extension_pin);

	// Initialize Serial Communication
	Serial.begin(115200);

	// Attach callback methods
	attachCommandCallbacks();


	// Flash led 3 times at the end of setup
	for(int i = 0; i < 3; i++) {
		digitalWrite(LED, HIGH);
		delay(250);
		digitalWrite(LED, LOW);
		delay(250);
	}
	ledState = LOW;
}
void loop() {
	// Process incoming serial data, and perform callbacks
	cmdMessenger.feedinSerialData();
}
// Callbacks define on which received commands we take action
void attachCommandCallbacks() {
	// Attach callback methods
	cmdMessenger.attach(unknownCommand);
	cmdMessenger.attach(kPing, ping);
	cmdMessenger.attach(kSetLed, setLed);
	cmdMessenger.attach(kSetServo, setServo);
	cmdMessenger.attach(kDetachServo, detachServo);
}

// Called when a received command has no attached function
void unknownCommand() {
	cmdMessenger.sendCmd(kError, kUnknown);
}

// Called upon initialization of Spine to check connection
void ping() {
	cmdMessenger.sendBinCmd(kAcknowledge, kPing);
	cmdMessenger.sendBinCmd(kPingResult, kPong);
}

// Callback function that sets led on or off
void setLed() {
	// Read led state argument, interpret string as boolean
	ledState = cmdMessenger.readBoolArg();
	digitalWrite(LED, ledState);
	cmdMessenger.sendBinCmd(kAcknowledge, kSetLed);
}

void setServo() {
	int indexNum = cmdMessenger.readBinArg<int>();
	if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > 3) {
		cmdMessenger.sendBinCmd(kError, kSetServo);
		return;
	}
	int value = cmdMessenger.readBinArg<int>();
	if(!cmdMessenger.isArgOk()){
		cmdMessenger.sendBinCmd(kError, kSetServo);
		return;
	}
	if(!servos[indexNum].attached()){
		servos[indexNum].attach(servo_pins[indexNum]);
	}
	servos[indexNum].write(value);
	cmdMessenger.sendBinCmd(kAcknowledge, kSetServo);
}

void detachServo() {
	int indexNum = cmdMessenger.readBinArg<int>();
	if(!cmdMessenger.isArgOk() || indexNum < 0 || indexNum > 3) {
		cmdMessenger.sendBinCmd(kError, kDetachServo);
		return;
	}
	servos[indexNum].detach();
	cmdMessenger.sendBinCmd(kAcknowledge, kDetachServo);
}


