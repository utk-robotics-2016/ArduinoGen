// Auto-generated by ArduinoGen

// Includes
#include "Wire.h";
#include "I2CEncoder.h";
#include "PID.h";
#include "vPID.h";
#include "Motor.h";

#define STR1(x)  #x
#define STR(x)  STR1(x)

// Globals
int ledState = HIGH;
// Command parsing
const int MAX_ARGS = 6;
String args[MAX_ARGS];
int numArgs = 0;

// Pin definitions
const char LED = 13;

// Constructors
const char leftBackEncoder_index = 0;
const char rightBackEncoder_index = 1;
const char rightFrontEncoder_index = 2;
const char leftFrontEncoder_index = 3;
I2CEncoder i2cencoders[4];

const char leftFrontVPID_index = 0;
const char rightBackVPID_index = 1;
const char leftBackVPID_index = 2;
const char rightFrontVPID_index = 3;
double lastPositions_vpid[4];
double Inputs_vpid[4], Setpoints_vpid[4], Outputs_vpid[4];
vPID vpids[4] = {
    vPID(&Inputs_vpid[leftFrontVPID_index], &Outputs_vpid[leftFrontVPID_index], &Setpoints_vpid[leftFrontVPID_index], 0.100000, 0.000000, 0.000000, DIRECT),
    vPID(&Inputs_vpid[rightBackVPID_index], &Outputs_vpid[rightBackVPID_index], &Setpoints_vpid[rightBackVPID_index], 0.100000, 0.000000, 0.000000, DIRECT),
    vPID(&Inputs_vpid[leftBackVPID_index], &Outputs_vpid[leftBackVPID_index], &Setpoints_vpid[leftBackVPID_index], 0.100000, 0.000000, 0.000000, DIRECT),
    vPID(&Inputs_vpid[rightFrontVPID_index], &Outputs_vpid[rightFrontVPID_index], &Setpoints_vpid[rightFrontVPID_index], 0.100000, 0.000000, 0.000000, DIRECT)
};

Motor motors[4] = {
    Motor(3, -1, 5, 0, Rover5),
    Motor(2, -1, 3, 0, Rover5),
    Motor(7, -1, 11, 0, Rover5),
    Motor(12, -1, 9, 0, Rover5)
};


void setup() {
    // Init LED pin
    pinMode(LED, OUTPUT);

    Wire.begin();
    i2cencoders[leftBackEncoder_index].init(MOTOR_393_TORQUE_ROTATIONS, MOTOR_393_TIME_DELTA);
    i2cencoders[rightBackEncoder_index].init(MOTOR_393_TORQUE_ROTATIONS, MOTOR_393_TIME_DELTA);
    i2cencoders[rightFrontEncoder_index].init(MOTOR_393_TORQUE_ROTATIONS, MOTOR_393_TIME_DELTA);
    i2cencoders[leftFrontEncoder_index].init(MOTOR_393_TORQUE_ROTATIONS, MOTOR_393_TIME_DELTA);
    i2cencoders[rightBackEncoder_index].setReversed(true);
    i2cencoders[rightFrontEncoder_index].setReversed(true);
    i2cencoders[leftBackEncoder_index].zero();
    i2cencoders[rightBackEncoder_index].zero();
    i2cencoders[rightFrontEncoder_index].zero();
    i2cencoders[leftFrontEncoder_index].zero();

    //Init Serial
    Serial.begin(115200);
}

/* The loop is set up in two parts. First the Arduino does the work it needs to
 * do for every loop, next is runs the checkInput() routine to check and act on
 * any input from the serial connection.
 */
void loop() {
    int inbyte;

    // Accept and parse serial input
    checkInput();
}

void parse_args(String command) {
    numArgs = 0;
    int beginIdx = 0;
    int idx = command.indexOf(" ");

    String arg;
    char charBuffer[16];

    while (idx != -1)
    {
        arg = command.substring(beginIdx, idx);

        // add error handling for atoi:
        args[numArgs++] = arg;
        beginIdx = idx + 1;
        idx = command.indexOf(" ", beginIdx);
    }

    arg = command.substring(beginIdx);
    args[numArgs++] = arg;
}

/* This routine checks for any input waiting on the serial line. If any is
 * available it is read in and added to a 128 character buffer. It sends back
 * an error should the buffer overflow, and starts overwriting the buffer
 * at that point. It only reads one character per call. If it receives a
 * newline character is then runs the parseAndExecuteCommand() routine.
 */
void checkInput() {
    int inbyte;
    static char incomingBuffer[128];
    static char bufPosition=0;

    if(Serial.available()>0) {
        // Read only one character per call
        inbyte = Serial.read();
        if(inbyte==10||inbyte==13) {
            // Newline detected
            incomingBuffer[bufPosition]='\0'; // NULL terminate the string
            bufPosition=0; // Prepare for next command

            // Supply a separate routine for parsing the command. This will
            // vary depending on the task.
            parseAndExecuteCommand(String(incomingBuffer));
        }
        else {
            incomingBuffer[bufPosition]=(char)inbyte;
            bufPosition++;
            if(bufPosition==128) {
                Serial.println("error: command overflow");
                bufPosition=0;
            }
        }
    }
}

/* This routine parses and executes any command received. It will have to be
 * rewritten for any sketch to use the appropriate commands and arguments for
 * the program you design. I find it easier to separate the input assembly
 * from parsing so that I only have to modify this function and can keep the
 * checkInput() function the same in each sketch.
 */
void parseAndExecuteCommand(String command) {
    Serial.println("> " + command);
    parse_args(command);
    if(args[0].equals(String("ping"))) {
        if(numArgs == 1) {
            Serial.println("ok");
        } else {
            Serial.println("error: usage - 'ping'");
        }
    }
    else if(args[0].equals(String("le"))) { // led set
        if(numArgs == 2) {
            if(args[1].equals(String("on"))) {
                ledState = HIGH;
                digitalWrite(LED,HIGH);
                Serial.println("ok");
            } else if(args[1].equals(String("off"))) {
                ledState = LOW;
                digitalWrite(LED,LOW);
                Serial.println("ok");
            } else {
                Serial.println("error: usage - 'le [on/off]'");
            }
        } else {
            Serial.println("error: usage - 'le [on/off]'");
        }
    }
    else if(args[0].equals(String("rl"))) { // read led
        if(numArgs == 1) {
            Serial.println(ledState);
        } else {
            Serial.println("error: usage - 'rl'");
        }
    }
    else if(args[0].equals(String("ep"))){ // i2c encoder position (in rotations)
        if(numArgs == 2){
            int indexNum = args[1].toInt();
            if(indexNum > -1 && indexNum < 4){
                char dts[256];
                dtostrf(i2cencoders[indexNum].getPosition(), 0, 6, dts);
                Serial.println(dts);
            } else {
                Serial.println("Error: usage - ep [id]");
            }
        } else {
            Serial.println("Error: usage - ep [id]");
        }
    }
    else if(args[0].equals(String("erp"))){ // i2c encoder raw position (in ticks)
        if(numArgs == 2){
            int indexNum = args[1].toInt();
            if(indexNum > -1 && indexNum < 4){
                char dts[256];
                dtostrf(i2cencoders[indexNum].getRawPosition(), 0, 6, dts);
                Serial.println(dts);
            } else {
                Serial.println("Error: usage - erp [id]");
            }
        } else {
            Serial.println("Error: usage - erp [id]");
        }
    }
    else if(args[0].equals(String("es"))){ // i2c encoder speed (in revolutions per minute)
        if(numArgs == 2){
            int indexNum = args[1].toInt();
            if(indexNum > -1 && indexNum < 4){
                char dts[256];
                dtostrf(i2cencoders[indexNum].getSpeed(), 0, 6, dts);
                Serial.println(dts);
            } else {
                Serial.println("Error: usage - es [id]");
            }
        } else {
            Serial.println("Error: usage - es [id]");
        }
    }
    else if(args[0].equals(String("ev"))){ // i2c encoder velocity (in revolutions per minute)
        if(numArgs == 2){
            int indexNum = args[1].toInt();
            if(indexNum > -1 && indexNum < 4){
                char dts[256];
                dtostrf(i2cencoders[indexNum].getVelocity(), 0, 6, dts);
                Serial.println(dts);
            } else {
                Serial.println("Error: usage - ev [id]");
            }
        } else {
            Serial.println("Error: usage - ev [id]");
        }
    }
    else if(args[0].equals(String("ez"))){ // i2c encoder zero
        if(numArgs == 2){
            int indexNum = args[1].toInt();
            if(indexNum > -1 && indexNum < 4){
                i2cencoders[indexNum].zero();
                Serial.println("ok");
            } else {
                Serial.println("Error: usage - ez [id]");
            }
        } else {
            Serial.println("Error: usage - ez [id]");
        }
    }
    else if (args[0].equals(String("vpc"))) { // Modify the velocity pid constants
    if (numArgs == 5) {
      int indexNum = args[1].toInt();
      if (indexNum > -1 && indexNum < 4) {
        vpids[indexNum].SetTunings(toDouble(args[2]), toDouble(args[3]), toDouble(args[4]));
        Serial.println("ok");
      } else {
        Serial.println(F("error: usage - 'vpc [index] [kp] [ki] [kd]'"));
      }
    } else {
      Serial.println(F("error: usage - 'vpc [index] [kp] [ki] [kd]'"));
    }
  }
  else if (args[0].equals(String("vps"))) { // Set the setpoint for a specific PID
    if (numArgs == 3) {
      int indexNum = args[1].toInt();
      if (indexNum > -1 && indexNum < 4) {
        vpids[indexNum].SetMode(AUTOMATIC);
        Setpoints_vpid[indexNum] = toDouble(args[2]);
        Serial.println(F("ok"));
      } else {
        Serial.println(F("error: usage - 'vps [index] [setpoint]'"));
      }
    } else {
      Serial.println(F("error: usage - 'vps [index] [setpoint]'"));
    }
  }
  else if (args[0].equals(String("vpoff"))) { // Turn off the PID
    if (numArgs == 2) {
      int indexNum = args[1].toInt();
      if (indexNum > -1 && indexNum < 4) {
        vpids[indexNum].SetMode(MANUAL);
        Serial.println(F("ok"));
      } else {
        Serial.println(F("error: usage - 'vpoff [index]'"));
      }
    } else {
      Serial.println(F("error: usage - 'vpoff [index]'"));
    }
  }
  else if (args[0].equals(String("vpd"))) { // Display Inputs, Setpoints, and Outputs
    if (numArgs == 2) {
      int indexNum = args[1].toInt();
      if (indexNum > -1 && indexNum < 4) {
        String ret = "";
        ret += Inputs_vpid[indexNum];
        ret += " ";
        ret += Setpoints_vpid[indexNum];
        ret += " ";
        ret += Outputs_vpid[indexNum];
        Serial.println(ret);
        } else {
        Serial.println(F("error: usage - 'vpd [index]'"));
      }
    } else {
      Serial.println(F("error: usage - 'vpd [index]'"));
    }
  }
    else if(args[0].equals(String("mod"))){ // motor drive
        if(numArgs ==  3) {
            int indexNum = args[1].toInt();
            if(indexNum > -1 && indexNum < 4) {
                int value = args[2].toInt();
                if( value < -1023 || value > 1023) {
                    Serial.println("Error: usage - mod [id] [value]");
                } else {
                    motors[indexNum].drive(value);
                    Serial.println("ok");
                }
            } else {
                Serial.println("Error: usage - mod [id] [value]");
            }
        } else {
            Serial.println("Error: usage - mod [id] [value]");
        }
    }
    else if(args[0].equals(String("mos"))){ // motor stop
        if(numArgs == 2) {
            int indexNum = args[1].toInt();
            if(indexNum > -1 && indexNum < 4) {
                motors[indexNum].stop();
                Serial.println("ok");
            } else {
                Serial.println("Error: usage - mos [id]");
            }
        } else {
            Serial.println("Error: usage - mos [id]");
        }
    }
    else if(args[0].equals(String("ver"))) { // version information
        if(numArgs == 1) {
            String out = "Source last modified: ";
            out += __TIMESTAMP__;
            out += "\r\nPreprocessor timestamp: " __DATE__ " " __TIME__;
            out += "\r\nSource code line number: ";
            out += __LINE__;
            out += "\r\nUsername: " STR(__USER__);
            out += "\r\nDirectory: " STR(__DIR__);
            out += "\r\nGit hash: " STR(__GIT_HASH__);
            Serial.println(out);
        } else {
            Serial.println("error: usage - 'ver'");
        }
    }
    else {
        // Unrecognized command
        Serial.println("error: unrecognized command");
    }
}

double toDouble(String s)
{
  char buf[s.length() + 1];
  s.toCharArray(buf, s.length() + 1);
  return atof(buf);
}
