class generator:
    def __init__(self, sensor_dict):
        self.sensor_dict = sensor_dict

    def add_header(self):
        return "// Auto-generated by ArduinoGen\n\n"

    def add_includes(self):
        rv = "// Includes\n"

        keys = self.sensor_dict.keys()
        for key in keys:
            rv = rv + "#include \"%s\";\n" % self.sensor_dict[key].get_include()
        rv = rv + "\n"

        rv = rv + "#define STR1(x)  #x\n"
        rv = rv + "#define STR(x)  STR1(x)\n\n"
        rv = rv + "// Globals\n"
        rv = rv + "int ledState = HIGH;\n"
        rv = rv + "// Command parsing\n"
        rv = rv + "const int MAX_ARGS = 6;\n"
        rv = rv + "String args[MAX_ARGS];\n"
        rv = rv + "int numArgs = 0;\n\n"

        return rv

    def add_pins(self):
        rv = "// Pin definitions\n"
        keys = self.sensor_dict.keys()
        for key in keys:
            rv = rv + self.sensor_dict[key].get_pins() + "\n"
        rv = rv + "\n"
        return rv

    def add_setup(self):
        rv = "void setup() {\n"
        keys = self.sensor_dict.keys()
        for key in keys:
            rv = rv + self.sensor_dict[key].get_setup() + "\n"
        rv = rv + "    //Init Serial\n  Serial.begin(115200);\n}\n\n"
        return rv

    def add_template(self, template_id):
        template = open("template%d.txt" % template_id, "r")
        rv = ""
        for line in template:
            rv = rv + line

        return rv

    def add_constructors(self):
        rv = "// Constructors\n"
        keys = self.sensor_dict.keys()
        for key in keys:
            rv = rv + self.sensor_dict[key].get_constructor() + "\n"
        rv = rv + "\n"
        return rv

    def add_sensor_commands(self):
        rv = ""
        keys = self.sensor_dict.keys()
        for key in keys:
            rv = rv + self.sensor_dict[key].get_response_block()            
        return rv
